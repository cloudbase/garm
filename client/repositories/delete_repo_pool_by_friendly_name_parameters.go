// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteRepoPoolByFriendlyNameParams creates a new DeleteRepoPoolByFriendlyNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteRepoPoolByFriendlyNameParams() *DeleteRepoPoolByFriendlyNameParams {
	return &DeleteRepoPoolByFriendlyNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepoPoolByFriendlyNameParamsWithTimeout creates a new DeleteRepoPoolByFriendlyNameParams object
// with the ability to set a timeout on a request.
func NewDeleteRepoPoolByFriendlyNameParamsWithTimeout(timeout time.Duration) *DeleteRepoPoolByFriendlyNameParams {
	return &DeleteRepoPoolByFriendlyNameParams{
		timeout: timeout,
	}
}

// NewDeleteRepoPoolByFriendlyNameParamsWithContext creates a new DeleteRepoPoolByFriendlyNameParams object
// with the ability to set a context for a request.
func NewDeleteRepoPoolByFriendlyNameParamsWithContext(ctx context.Context) *DeleteRepoPoolByFriendlyNameParams {
	return &DeleteRepoPoolByFriendlyNameParams{
		Context: ctx,
	}
}

// NewDeleteRepoPoolByFriendlyNameParamsWithHTTPClient creates a new DeleteRepoPoolByFriendlyNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteRepoPoolByFriendlyNameParamsWithHTTPClient(client *http.Client) *DeleteRepoPoolByFriendlyNameParams {
	return &DeleteRepoPoolByFriendlyNameParams{
		HTTPClient: client,
	}
}

/*
DeleteRepoPoolByFriendlyNameParams contains all the parameters to send to the API endpoint

	for the delete repo pool by friendly name operation.

	Typically these are written to a http.Request.
*/
type DeleteRepoPoolByFriendlyNameParams struct {

	/* EndpointName.

	   Repository endpointName.
	*/
	EndpointName *string

	/* Owner.

	   Repository owner.
	*/
	Owner string

	/* PoolID.

	   ID of the repository pool to delete.
	*/
	PoolID string

	/* Repo.

	   Repository name.
	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete repo pool by friendly name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteRepoPoolByFriendlyNameParams) WithDefaults() *DeleteRepoPoolByFriendlyNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete repo pool by friendly name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteRepoPoolByFriendlyNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) WithTimeout(timeout time.Duration) *DeleteRepoPoolByFriendlyNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) WithContext(ctx context.Context) *DeleteRepoPoolByFriendlyNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) WithHTTPClient(client *http.Client) *DeleteRepoPoolByFriendlyNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndpointName adds the endpointName to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) WithEndpointName(endpointName *string) *DeleteRepoPoolByFriendlyNameParams {
	o.SetEndpointName(endpointName)
	return o
}

// SetEndpointName adds the endpointName to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) SetEndpointName(endpointName *string) {
	o.EndpointName = endpointName
}

// WithOwner adds the owner to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) WithOwner(owner string) *DeleteRepoPoolByFriendlyNameParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithPoolID adds the poolID to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) WithPoolID(poolID string) *DeleteRepoPoolByFriendlyNameParams {
	o.SetPoolID(poolID)
	return o
}

// SetPoolID adds the poolId to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) SetPoolID(poolID string) {
	o.PoolID = poolID
}

// WithRepo adds the repo to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) WithRepo(repo string) *DeleteRepoPoolByFriendlyNameParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the delete repo pool by friendly name params
func (o *DeleteRepoPoolByFriendlyNameParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepoPoolByFriendlyNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndpointName != nil {

		// query param endpointName
		var qrEndpointName string

		if o.EndpointName != nil {
			qrEndpointName = *o.EndpointName
		}
		qEndpointName := qrEndpointName
		if qEndpointName != "" {

			if err := r.SetQueryParam("endpointName", qEndpointName); err != nil {
				return err
			}
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param poolID
	if err := r.SetPathParam("poolID", o.PoolID); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
