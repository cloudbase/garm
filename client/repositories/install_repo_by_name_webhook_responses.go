// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	apiserver_params "github.com/cloudbase/garm/apiserver/params"
	garm_params "github.com/cloudbase/garm/params"
)

// InstallRepoByNameWebhookReader is a Reader for the InstallRepoByNameWebhook structure.
type InstallRepoByNameWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstallRepoByNameWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInstallRepoByNameWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewInstallRepoByNameWebhookDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewInstallRepoByNameWebhookOK creates a InstallRepoByNameWebhookOK with default headers values
func NewInstallRepoByNameWebhookOK() *InstallRepoByNameWebhookOK {
	return &InstallRepoByNameWebhookOK{}
}

/*
InstallRepoByNameWebhookOK describes a response with status code 200, with default header values.

HookInfo
*/
type InstallRepoByNameWebhookOK struct {
	Payload garm_params.HookInfo
}

// IsSuccess returns true when this install repo by name webhook o k response has a 2xx status code
func (o *InstallRepoByNameWebhookOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this install repo by name webhook o k response has a 3xx status code
func (o *InstallRepoByNameWebhookOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install repo by name webhook o k response has a 4xx status code
func (o *InstallRepoByNameWebhookOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this install repo by name webhook o k response has a 5xx status code
func (o *InstallRepoByNameWebhookOK) IsServerError() bool {
	return false
}

// IsCode returns true when this install repo by name webhook o k response a status code equal to that given
func (o *InstallRepoByNameWebhookOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the install repo by name webhook o k response
func (o *InstallRepoByNameWebhookOK) Code() int {
	return 200
}

func (o *InstallRepoByNameWebhookOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /repositories/{owner}/{repo}/webhook][%d] installRepoByNameWebhookOK %s", 200, payload)
}

func (o *InstallRepoByNameWebhookOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /repositories/{owner}/{repo}/webhook][%d] installRepoByNameWebhookOK %s", 200, payload)
}

func (o *InstallRepoByNameWebhookOK) GetPayload() garm_params.HookInfo {
	return o.Payload
}

func (o *InstallRepoByNameWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallRepoByNameWebhookDefault creates a InstallRepoByNameWebhookDefault with default headers values
func NewInstallRepoByNameWebhookDefault(code int) *InstallRepoByNameWebhookDefault {
	return &InstallRepoByNameWebhookDefault{
		_statusCode: code,
	}
}

/*
InstallRepoByNameWebhookDefault describes a response with status code -1, with default header values.

APIErrorResponse
*/
type InstallRepoByNameWebhookDefault struct {
	_statusCode int

	Payload apiserver_params.APIErrorResponse
}

// IsSuccess returns true when this install repo by name webhook default response has a 2xx status code
func (o *InstallRepoByNameWebhookDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this install repo by name webhook default response has a 3xx status code
func (o *InstallRepoByNameWebhookDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this install repo by name webhook default response has a 4xx status code
func (o *InstallRepoByNameWebhookDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this install repo by name webhook default response has a 5xx status code
func (o *InstallRepoByNameWebhookDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this install repo by name webhook default response a status code equal to that given
func (o *InstallRepoByNameWebhookDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the install repo by name webhook default response
func (o *InstallRepoByNameWebhookDefault) Code() int {
	return o._statusCode
}

func (o *InstallRepoByNameWebhookDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /repositories/{owner}/{repo}/webhook][%d] InstallRepoByNameWebhook default %s", o._statusCode, payload)
}

func (o *InstallRepoByNameWebhookDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /repositories/{owner}/{repo}/webhook][%d] InstallRepoByNameWebhook default %s", o._statusCode, payload)
}

func (o *InstallRepoByNameWebhookDefault) GetPayload() apiserver_params.APIErrorResponse {
	return o.Payload
}

func (o *InstallRepoByNameWebhookDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
