// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	apiserver_params "github.com/cloudbase/garm/apiserver/params"
	garm_params "github.com/cloudbase/garm/params"
)

// UpdateRepoByFriendlyNameReader is a Reader for the UpdateRepoByFriendlyName structure.
type UpdateRepoByFriendlyNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepoByFriendlyNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRepoByFriendlyNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateRepoByFriendlyNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateRepoByFriendlyNameOK creates a UpdateRepoByFriendlyNameOK with default headers values
func NewUpdateRepoByFriendlyNameOK() *UpdateRepoByFriendlyNameOK {
	return &UpdateRepoByFriendlyNameOK{}
}

/*
UpdateRepoByFriendlyNameOK describes a response with status code 200, with default header values.

Repository
*/
type UpdateRepoByFriendlyNameOK struct {
	Payload garm_params.Repository
}

// IsSuccess returns true when this update repo by friendly name o k response has a 2xx status code
func (o *UpdateRepoByFriendlyNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update repo by friendly name o k response has a 3xx status code
func (o *UpdateRepoByFriendlyNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update repo by friendly name o k response has a 4xx status code
func (o *UpdateRepoByFriendlyNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update repo by friendly name o k response has a 5xx status code
func (o *UpdateRepoByFriendlyNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update repo by friendly name o k response a status code equal to that given
func (o *UpdateRepoByFriendlyNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update repo by friendly name o k response
func (o *UpdateRepoByFriendlyNameOK) Code() int {
	return 200
}

func (o *UpdateRepoByFriendlyNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /repositories/{owner}/{repo}][%d] updateRepoByFriendlyNameOK %s", 200, payload)
}

func (o *UpdateRepoByFriendlyNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /repositories/{owner}/{repo}][%d] updateRepoByFriendlyNameOK %s", 200, payload)
}

func (o *UpdateRepoByFriendlyNameOK) GetPayload() garm_params.Repository {
	return o.Payload
}

func (o *UpdateRepoByFriendlyNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRepoByFriendlyNameDefault creates a UpdateRepoByFriendlyNameDefault with default headers values
func NewUpdateRepoByFriendlyNameDefault(code int) *UpdateRepoByFriendlyNameDefault {
	return &UpdateRepoByFriendlyNameDefault{
		_statusCode: code,
	}
}

/*
UpdateRepoByFriendlyNameDefault describes a response with status code -1, with default header values.

APIErrorResponse
*/
type UpdateRepoByFriendlyNameDefault struct {
	_statusCode int

	Payload apiserver_params.APIErrorResponse
}

// IsSuccess returns true when this update repo by friendly name default response has a 2xx status code
func (o *UpdateRepoByFriendlyNameDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update repo by friendly name default response has a 3xx status code
func (o *UpdateRepoByFriendlyNameDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update repo by friendly name default response has a 4xx status code
func (o *UpdateRepoByFriendlyNameDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update repo by friendly name default response has a 5xx status code
func (o *UpdateRepoByFriendlyNameDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update repo by friendly name default response a status code equal to that given
func (o *UpdateRepoByFriendlyNameDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update repo by friendly name default response
func (o *UpdateRepoByFriendlyNameDefault) Code() int {
	return o._statusCode
}

func (o *UpdateRepoByFriendlyNameDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /repositories/{owner}/{repo}][%d] UpdateRepoByFriendlyName default %s", o._statusCode, payload)
}

func (o *UpdateRepoByFriendlyNameDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /repositories/{owner}/{repo}][%d] UpdateRepoByFriendlyName default %s", o._statusCode, payload)
}

func (o *UpdateRepoByFriendlyNameDefault) GetPayload() apiserver_params.APIErrorResponse {
	return o.Payload
}

func (o *UpdateRepoByFriendlyNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
